{
  "contract_name": "mars-airdrop",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "merkle_root"
    ],
    "properties": {
      "merkle_root": {
        "description": "Root of the Merkle tree, in hex encoding; each leaf is the SHA256 hash of the string `{recipient},{amount}`",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Claim an airdrop\n\nParameters: - `terra_acct_pk`: Public key of the Mars Classic token holder, in hex encoding - `mars_acct`: Mars address to which the claimed tokens shall to sent - `amount`: Amount of Mars tokens claim - `proof`: Proof that leaf `{terra-acct}:{amount}` exists in the Merkle tree, in hex encoding - `signature`: Signature produced by signing message `airdrop for {terra-acct} of {amount} umars shall be released to {mars-acct}` by the Terra account's private key, in hex encoding",
        "type": "object",
        "required": [
          "claim"
        ],
        "properties": {
          "claim": {
            "type": "object",
            "required": [
              "amount",
              "mars_acct",
              "proof",
              "signature",
              "terra_acct_pk"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "mars_acct": {
                "type": "string"
              },
              "proof": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "signature": {
                "type": "string"
              },
              "terra_acct_pk": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "The contract's config",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "The amount of tokens that an account has claimed",
        "type": "object",
        "required": [
          "claimed"
        ],
        "properties": {
          "claimed": {
            "type": "object",
            "required": [
              "terra_acct"
            ],
            "properties": {
              "terra_acct": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Enumerate all accounts that have claimed",
        "type": "object",
        "required": [
          "all_claimed"
        ],
        "properties": {
          "all_claimed": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Verify the validity of a signature",
        "type": "object",
        "required": [
          "verify_signature"
        ],
        "properties": {
          "verify_signature": {
            "type": "object",
            "required": [
              "amount",
              "mars_acct",
              "signature",
              "terra_acct_pk"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "mars_acct": {
                "type": "string"
              },
              "signature": {
                "type": "string"
              },
              "terra_acct_pk": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Verify a Merkle proof",
        "type": "object",
        "required": [
          "verify_proof"
        ],
        "properties": {
          "verify_proof": {
            "type": "object",
            "required": [
              "amount",
              "proof",
              "terra_acct"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "proof": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "terra_acct": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "all_claimed": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_ClaimedResponse",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ClaimedResponse"
      },
      "definitions": {
        "ClaimedResponse": {
          "type": "object",
          "required": [
            "amount",
            "terra_acct"
          ],
          "properties": {
            "amount": {
              "description": "The amount of tokens this user has claimed",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "terra_acct": {
              "description": "The user's Terra account address",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "claimed": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ClaimedResponse",
      "type": "object",
      "required": [
        "amount",
        "terra_acct"
      ],
      "properties": {
        "amount": {
          "description": "The amount of tokens this user has claimed",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "terra_acct": {
          "description": "The user's Terra account address",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "InstantiateMsg",
      "type": "object",
      "required": [
        "merkle_root"
      ],
      "properties": {
        "merkle_root": {
          "description": "Root of the Merkle tree, in hex encoding; each leaf is the SHA256 hash of the string `{recipient},{amount}`",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "verify_proof": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    },
    "verify_signature": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Boolean",
      "type": "boolean"
    }
  }
}
