// @ts-nocheck
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, ArrayOfClaimedResponse, ClaimedResponse, Boolean } from "./MarsAirdrop.types";
import { MarsAirdropQueryClient, MarsAirdropClient } from "./MarsAirdrop.client";
export const marsAirdropQueryKeys = {
  contract: ([{
    contract: "marsAirdrop"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...marsAirdropQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsAirdropQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  claimed: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsAirdropQueryKeys.address(contractAddress)[0],
    method: "claimed",
    args
  }] as const),
  allClaimed: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsAirdropQueryKeys.address(contractAddress)[0],
    method: "all_claimed",
    args
  }] as const),
  verifySignature: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsAirdropQueryKeys.address(contractAddress)[0],
    method: "verify_signature",
    args
  }] as const),
  verifyProof: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...marsAirdropQueryKeys.address(contractAddress)[0],
    method: "verify_proof",
    args
  }] as const)
};
export interface MarsAirdropReactQuery<TResponse, TData = TResponse> {
  client: MarsAirdropQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface MarsAirdropVerifyProofQuery<TData> extends MarsAirdropReactQuery<Boolean, TData> {
  args: {
    amount: Uint128;
    proof: string[];
    terraAcct: string;
  };
}
export function useMarsAirdropVerifyProofQuery<TData = Boolean>({
  client,
  args,
  options
}: MarsAirdropVerifyProofQuery<TData>) {
  return useQuery<Boolean, Error, TData>(marsAirdropQueryKeys.verifyProof(client?.contractAddress, args), () => client ? client.verifyProof({
    amount: args.amount,
    proof: args.proof,
    terraAcct: args.terraAcct
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsAirdropVerifySignatureQuery<TData> extends MarsAirdropReactQuery<Boolean, TData> {
  args: {
    amount: Uint128;
    marsAcct: string;
    signature: string;
    terraAcctPk: string;
  };
}
export function useMarsAirdropVerifySignatureQuery<TData = Boolean>({
  client,
  args,
  options
}: MarsAirdropVerifySignatureQuery<TData>) {
  return useQuery<Boolean, Error, TData>(marsAirdropQueryKeys.verifySignature(client?.contractAddress, args), () => client ? client.verifySignature({
    amount: args.amount,
    marsAcct: args.marsAcct,
    signature: args.signature,
    terraAcctPk: args.terraAcctPk
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsAirdropAllClaimedQuery<TData> extends MarsAirdropReactQuery<ArrayOfClaimedResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useMarsAirdropAllClaimedQuery<TData = ArrayOfClaimedResponse>({
  client,
  args,
  options
}: MarsAirdropAllClaimedQuery<TData>) {
  return useQuery<ArrayOfClaimedResponse, Error, TData>(marsAirdropQueryKeys.allClaimed(client?.contractAddress, args), () => client ? client.allClaimed({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsAirdropClaimedQuery<TData> extends MarsAirdropReactQuery<ClaimedResponse, TData> {
  args: {
    terraAcct: string;
  };
}
export function useMarsAirdropClaimedQuery<TData = ClaimedResponse>({
  client,
  args,
  options
}: MarsAirdropClaimedQuery<TData>) {
  return useQuery<ClaimedResponse, Error, TData>(marsAirdropQueryKeys.claimed(client?.contractAddress, args), () => client ? client.claimed({
    terraAcct: args.terraAcct
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsAirdropConfigQuery<TData> extends MarsAirdropReactQuery<InstantiateMsg, TData> {}
export function useMarsAirdropConfigQuery<TData = InstantiateMsg>({
  client,
  options
}: MarsAirdropConfigQuery<TData>) {
  return useQuery<InstantiateMsg, Error, TData>(marsAirdropQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface MarsAirdropClaimMutation {
  client: MarsAirdropClient;
  msg: {
    amount: Uint128;
    marsAcct: string;
    proof: string[];
    signature: string;
    terraAcctPk: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useMarsAirdropClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MarsAirdropClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, MarsAirdropClaimMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(msg, fee, memo, funds), options);
}