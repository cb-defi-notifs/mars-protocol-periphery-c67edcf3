// @ts-nocheck
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, ArrayOfClaimedResponse, ClaimedResponse, Boolean } from "./MarsAirdrop.types";
export interface MarsAirdropReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<InstantiateMsg>;
  claimed: ({
    terraAcct
  }: {
    terraAcct: string;
  }) => Promise<ClaimedResponse>;
  allClaimed: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfClaimedResponse>;
  verifySignature: ({
    amount,
    marsAcct,
    signature,
    terraAcctPk
  }: {
    amount: Uint128;
    marsAcct: string;
    signature: string;
    terraAcctPk: string;
  }) => Promise<Boolean>;
  verifyProof: ({
    amount,
    proof,
    terraAcct
  }: {
    amount: Uint128;
    proof: string[];
    terraAcct: string;
  }) => Promise<Boolean>;
}
export class MarsAirdropQueryClient implements MarsAirdropReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.claimed = this.claimed.bind(this);
    this.allClaimed = this.allClaimed.bind(this);
    this.verifySignature = this.verifySignature.bind(this);
    this.verifyProof = this.verifyProof.bind(this);
  }

  config = async (): Promise<InstantiateMsg> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  claimed = async ({
    terraAcct
  }: {
    terraAcct: string;
  }): Promise<ClaimedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      claimed: {
        terra_acct: terraAcct
      }
    });
  };
  allClaimed = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfClaimedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_claimed: {
        limit,
        start_after: startAfter
      }
    });
  };
  verifySignature = async ({
    amount,
    marsAcct,
    signature,
    terraAcctPk
  }: {
    amount: Uint128;
    marsAcct: string;
    signature: string;
    terraAcctPk: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verify_signature: {
        amount,
        mars_acct: marsAcct,
        signature,
        terra_acct_pk: terraAcctPk
      }
    });
  };
  verifyProof = async ({
    amount,
    proof,
    terraAcct
  }: {
    amount: Uint128;
    proof: string[];
    terraAcct: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verify_proof: {
        amount,
        proof,
        terra_acct: terraAcct
      }
    });
  };
}
export interface MarsAirdropInterface extends MarsAirdropReadOnlyInterface {
  contractAddress: string;
  sender: string;
  claim: ({
    amount,
    marsAcct,
    proof,
    signature,
    terraAcctPk
  }: {
    amount: Uint128;
    marsAcct: string;
    proof: string[];
    signature: string;
    terraAcctPk: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MarsAirdropClient extends MarsAirdropQueryClient implements MarsAirdropInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.claim = this.claim.bind(this);
  }

  claim = async ({
    amount,
    marsAcct,
    proof,
    signature,
    terraAcctPk
  }: {
    amount: Uint128;
    marsAcct: string;
    proof: string[];
    signature: string;
    terraAcctPk: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        amount,
        mars_acct: marsAcct,
        proof,
        signature,
        terra_acct_pk: terraAcctPk
      }
    }, fee, memo, funds);
  };
}